# arrange(~date) %>%
top_n(14, date) %>%
plot_ly(x = ~date) %>%
add_bars(y = ~value, color = I('darkgreen')) %>%
config(displayModeBar = F) %>%
layout(
title = "Confirmed Cases",
xaxis = ax)
}
})
output$state_trend_death <- renderPlotly({
ax <- list(
title = ""
)
if(is.null(reactive_single_state())){
plot_ly()
} else{
as.data.frame(reactive_single_state()) %>%
filter(type == 'DEATH') %>%
# arrange(~date) %>%
top_n(14, date) %>%
plot_ly(x = ~date) %>%
add_bars(y = ~value, color = I('darkred')) %>%
config(displayModeBar = F) %>%
layout(
title = "Death Cases",
xaxis = ax)
}
})
# Top 10 counties
output$reactive_top10_county <- renderDataTable({
click <- input$mymap_shape_click
confirm <- cty_data_gather %>% filter(date == input$plot_date) %>% filter(State %in% click$id)
death <- cv_death_gather %>% filter(date == input$plot_date) %>% filter(State %in% click$id)
confirm <- confirm %>% select(countyFIPS, NAME, value) %>% rename(confirmed = value)
death <- death %>% select(countyFIPS, value) %>% rename(deaths = value)
df <- confirm %>% left_join(death, by = 'countyFIPS') %>% arrange(-confirmed) %>% select(-countyFIPS) %>%
rename(County = NAME, Confirmed = confirmed, Deaths = deaths) %>%
mutate(Deaths = ifelse(is.na(Deaths), 0, Deaths)) %>%
mutate(Confirmed = as.integer(Confirmed), Deaths = as.integer(Deaths))
df
},
options = list(
autoWidth = TRUE,
columnDefs = list(list(width = '100px', targets = "_all")),
lengthChange = FALSE
), rownames = F)
# Top states
output$reactive_top_states <- renderDataTable({
confirm <- state_gather %>% filter(date == input$plot_date) %>% filter(type == 'CONFIRM')
death <- state_gather %>% filter(date == input$plot_date) %>% filter(type == 'DEATH')
confirm <- as.data.frame(confirm) %>% select(State, value) %>% rename(confirmed = value)
death <- as.data.frame(death) %>% select(State, value) %>% rename(deaths = value)
df <- confirm %>%
left_join(death, by = 'State') %>%
left_join(select(state_coord, state, name), by = c('State' = 'state')) %>%
select(name, confirmed, deaths) %>%
rename(State = name, Confirmed = confirmed, Deaths = deaths) %>%
mutate(Deaths = ifelse(is.na(Deaths), 0, Deaths)) %>%
mutate(Confirmed = as.integer(Confirmed), Deaths = as.integer(Deaths)) %>%
arrange(-Confirmed)
df
},
options = list(
autoWidth = TRUE,
columnDefs = list(list(width = '100px', targets = "_all")),
lengthChange = FALSE
), rownames = F)
# Last Update
# output$reactive_last_update <- renderText({
#   paste0("Last Updated: ", unique(reactive_covid()@data$last_update)[1])
# })
# <font size="3" color="red">This is some text!</font>
# Reactive Label
labels_state <- reactive({
sprintf(
"<strong><u>%s</u></strong><br/><font color='green'>%s Confirmed Cases </font><br/><font color='red'>%s Deaths</font>",
reactive_covid_state()$State, prettyNum(reactive_covid_state()$value,big.mark=","), prettyNum(reactive_covid_state2()$value,big.mark=",")
) %>% lapply(htmltools::HTML)
})
# Base leaflet map
output$mymap <- renderLeaflet({
basemap %>%
addCircles(data = reactive_covid_state(),
lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~value^(1/3) * 2500, color = 'red',
layerId = ~State,
highlightOptions = highlightOptions(color = 'white', weight = 2, bringToFront = T),
label = labels_state(),
labelOptions = labelOptions(
style = list("font-weight" = "normal"),
textsize = "15px",
direction = "auto"))
})
# Reactive Label
# labels <- reactive({
#   sprintf(
#     "<strong>%s</strong><br/>%g Confirmed Cases",
#     reactive_covid()@data$NAME, reactive_covid()@data$INFECTED
#   ) %>% lapply(htmltools::HTML)
# })
# Observe Event
observe({
# covid_state <- state_gather %>% filter(date == plot_date) %>%
#   filter(type == 'CONFIRM')
#
click <- input$mymap_shape_click
cty_data_gather = cty_data_gather %>% filter(date == input$plot_date)
cty@data <- cty_data_gather
# if(is.null(input$state_select)){
#   cty@data$INFECTED = 0
#   return(cty)
# } else{
#   cty = subset(cty, State %in% input$state_select)
#   return(cty)
# }
if(is.null(click)){
return()}
else{
new_data_confirm <- reactive_covid_state() %>% filter(!State %in% click$id)
new_data_deaths  <- reactive_covid_state2() %>% filter(!State %in% click$id)
labels_state <- sprintf(
"<strong><u>%s</u></strong><br/><font color='green'>%s Confirmed Cases </font><br/><font color='red'>%s Deaths</font>",
new_data_confirm$State, prettyNum(new_data_confirm$value,big.mark=","), prettyNum(new_data_deaths$value,big.mark=",")
) %>% lapply(htmltools::HTML)
cty = subset(cty, State %in% click$id)
labels_cty <- sprintf(
"<strong><u>%s</u></strong><br/><font color='green'>%s Confirmed Cases",
cty@data$`County Name`, prettyNum(cty@data$value,big.mark=",")
) %>% lapply(htmltools::HTML)
leafletProxy('mymap') %>%
setView(lng = click$lng, lat = click$lat, zoom = 7) %>%
clearShapes() %>%
addCircles(data = reactive_covid_state() %>% filter(!State %in% click$id),
lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~value^(1/3) * 2500, color = 'red',
layerId = ~State,
highlightOptions = highlightOptions(color = 'white', weight = 2, bringToFront = T),
label = labels_state,
labelOptions = labelOptions(
style = list("font-weight" = "normal"),
textsize = "15px",
direction = "auto")) %>%
addPolygons(data = cty,
color = '#444444', weight = 1, smoothFactor = 0.5,
opacity = 0.5, fillOpacity = 0.5,
fillColor = ~pal(value),
highlightOptions = highlightOptions(color = 'white', weight = 2, bringToFront = T),
label = ~labels_cty,
# options = pathOptions(interactive = FALSE),
labelOptions = labelOptions(
style = list("font-weight" = "normal"),
textsize = "15px",
direction = "auto"))
}
})
# observe({
#   # event <- input$map_shape_click
#   cty_data_gather = cty_data_gather %>% filter(date == input$plot_date)
#   cty@data <- cty_data_gather
#   cty@data$INFECTED <- cty@data$value
#
#   if(is.null(input$map_shape_click)){
#     cty@data$INFECTED = 0
#   } else{
#     cty = subset(cty, State == input$map_shape_click)
#   }
#
#   leafletProxy("mymap") %>%
#     clearShapes() %>%
#     addPolygons(data = cty,
#                 color = '#444444', weight = 1, smoothFactor = 0.5,
#                 opacity = 0.5, fillOpacity = 0.9,
#                 fillColor = ~pal(INFECTED),
#                 highlightOptions = highlightOptions(color = 'white', weight = 2, bringToFront = T),
#                 label = labels(),
#                 labelOptions = labelOptions(
#                   style = list("font-weight" = "normal"),
#                   textsize = "15px",
#                   direction = "auto"))
# })
# click on a marker
# click on a marker
# observe({
#   event <- input$map_marker_click
#   reactive_covid <-
#
#   message <- paste("widgets sold in", points$name[points$uid == event$id],":", points$widgets[points$uid == event$id])
#   output$widgets <- renderText(message)
# })
# covid by country
covid_by_ctry = reactive({
covid_tidy %>%
filter(type == input$type2) %>%
filter(country %in% input$country_select)
})
# covid US days since 100
# reactive
reactive_annot = reactive({
# Data frame for COVID19 days since 100
covid_tidy_days_since_100 <- covid_tidy %>%
filter(type == input$type2) %>%
filter(value > 100) %>%
group_by(country) %>%
mutate(days = 1) %>%
mutate(days_since_100 = cumsum(days))
covid_tidy_days_since_100 %>%
filter(country %in% input$country_select) %>%
group_by(country) %>%
filter(days_since_100 == max(days_since_100))
})
# reactive
reactive_days_100 = reactive({
covid_tidy_days_since_100 <- covid_tidy %>%
filter(type == input$type2) %>%
filter(value > 100) %>%
group_by(country) %>%
mutate(days = 1) %>%
mutate(days_since_100 = cumsum(days)) %>%
filter(country %in% input$country_select)
})
# Plotly New/Cumlative/Cumulative Log Cases by Country
output$country_plot_cumulative_log <- renderPlotly({
country_cases_plot(covid_by_ctry(), 'log_cumulative')
})
output$country_plot <- renderPlotly({
country_cases_plot(covid_by_ctry(), 'new')
})
output$country_plot_cumulative <- renderPlotly({
country_cases_plot(covid_by_ctry(), 'cumulative')
})
output$country_plot_days_since_100 <- renderPlotly({
country_cases_plot(reactive_days_100(), 'days_since_100') %>%
add_annotations(x = reactive_annot()$days_since_100,
y = log(reactive_annot()$value),
color = ~factor(reactive_annot()$country),
text = reactive_annot()$country,
showarrow = F,
ax = 30,
font = list(family = 'sans serif',
size = 14))
})
}
shinyApp(ui, server)
library(rsconnect)
deployApp()
control <- control.icm(type = "SIR", nsteps = 100, nsims = 10)
init <- init.icm(s.num = 997, i.num = 3, r.num = 0)
?param.icm
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
control <- control.icm(type = "SIR", nsteps = 100, nsims = 10)
init <- init.icm(s.num = 20000000, i.num = 5, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
control <- control.icm(type = "SIR", nsteps = 100, nsims = 1)
init <- init.icm(s.num = 10000, i.num = 5, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
control <- control.icm(type = "SIR", nsteps = 100, nsims = 1)
init <- init.icm(s.num = 50000, i.num = 5, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
control <- control.icm(type = "SIR", nsteps = 100, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 5, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 10, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
dim(sim)
class(sim)
class(sim$epi)
sim$epi$s.num
dim(state_gather)
names(state_gather)
ny_gather <- state_gather %>%
filter(State == 'NY')
dim(ny_gather)
names(ny_gather)
table(ny_gather$type)
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM')
ny_ts
plot(ny_ts$date, ny_ts$value)
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04'))
plot(ny_ts$date, ny_ts$value)
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04') & date < as.Date('2020-03-31'))
plot(ny_ts$date, ny_ts$value)
ny_ts <- ny_ts %>%
mutate(new_case = value - lag(value))
plot(ny_ts$date, ny_ts$new_case)
ny_ts <- ny_ts %>%
mutate(new_case = value - lag(value)) %>%
mutate(new_case = ifelse(is.na(new_case), 0, new_case))
plot(ny_ts$date, ny_ts$new_case)
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04') & date < as.Date('2020-03-31'))
ny_ts <- ny_ts %>%
mutate(new_case = value - lag(value, default = first(value)))
ny_ts
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04') & date < as.Date('2020-03-31'))
ny_ts <- ny_ts %>%
mutate(new_case = value - dplyr::lag(value, default = first(value)))
ny_ts
ny_ts <- ny_ts %>%
mutate(new_case = lag(value, default = first(value)))
ny_ts
ny_tss
ny_ts
class(ny_ts)
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04') & date < as.Date('2020-03-31'))
ny_ts <- as.data.frame(ny_ts) %>%
mutate(new_case = lag(value, default = first(value)))
ny_ts
ny_ts <- state_gather %>%
filter(State == 'NY') %>%
filter(type == 'CONFIRM') %>%
filter(date >= as.Date('2020-03-04') & date < as.Date('2020-03-31'))
ny_ts <- as.data.frame(ny_ts) %>%
mutate(new_case = value - lag(value, default = first(value)))
plot(ny_ts$date, ny_ts$new_case)
ggplot(ny_ts, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth()
ggplot(ny_ts, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
plot(sim, y = 'si.flow')
plot(sim)
plot(sim, y = 'si.flow')
plot(sim, y = 'si.flow')
ggplot(ny_ts, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
plot(sim, y = 'si.flow')
20000000/20000
?param.icm
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/14,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
control <- control.icm(type = "SIR", nsteps = 30, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/14,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
control <- control.icm(type = "SIR", nsteps = 60, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/14,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
ggplot(ny_ts, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
control <- control.icm(type = "SIR", nsteps = 60, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 7, rec.rate = 1/14,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
ggplot(ny_ts, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
names(covid_by_ctry)
names(covid_tidy)
table(covid_tidy$country)
south_k <- covid_tidy %>%
filter(country == 'Korea, South')
dim(south_k)
names(south_k)
southk_ts <- as.data.frame(southk_ts) %>%
mutate(new_case = value - lag(value, default = first(value)))
south_k <- as.data.frame(south_k) %>%
mutate(new_case = value - lag(value, default = first(value)))
ggplot(south_k, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
names(south_k)
dim(south_k)
View(south_k)
south_k <- covid_tidy %>%
filter(country == 'Korea, South') %>%
filter(type == 'CONFIRM')
south_k <- as.data.frame(south_k) %>%
mutate(new_case = value - lag(value, default = first(value)))
ggplot(south_k, aes(x=date, y=new_case)) +
geom_point() +
geom_smooth(method='loess')
View(south_k)
ggplot(south_k, aes(x=as.Date(date, format = '%m/%d/%Y'), y=new_case)) +
geom_point() +
geom_smooth(method='loess')
plot(sim, y = 'si.flow')
plot(sim)
control <- control.icm(type = "SIR", nsteps = 60, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 7, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
400*1000
?plot
plot(sim, y = 'ir.flow')
plot(sim, y = 'si.flow')
control <- control.icm(type = "SIR", nsteps = 60, nsims = 5)
init <- init.icm(s.num = 20000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
sim$epi$si.flow
plot(sim, y = 'ir.flow')
sim$epi$r.num
sim$epi$di.flow
sim$epi$ir.flow
sim$epi$si.flow
90*1000
90*100
90*1000
20000000/20000
control <- control.icm(type = "SIR", nsteps = 60, nsims = 5)
init <- init.icm(s.num = 200000, i.num = 3, r.num = 0)
control <- control.icm(type = "SIR", nsteps = 60, nsims = 1)
init <- init.icm(s.num = 200000, i.num = 3, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
sim$epi$ir.flow
sim$epi$si.flow
sim$epi$i.num
control <- control.icm(type = "SIR", nsteps = 60, nsims = 1)
init <- init.icm(s.num = 200000, i.num = 22, r.num = 0)
param <- param.icm(inf.prob = 0.05, act.rate = 5, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
plot(sim)
plot(sim, y = 'si.flow')
sim$epi$s.num
sim$epi$si.flow
plot(sim)
sim$epi$si.flow
summary(sim, at = 27)
control <- control.icm(type = "SIR", nsteps = 60, nsims = 1)
init <- init.icm(s.num = 200000, i.num = 22, r.num = 0)
param <- param.icm(inf.prob = 0.04, act.rate = 5, rec.rate = 1/20,
a.rate = (10.5/365)/1000, ds.rate = (7/365)/1000, di.rate = (14/365)/1000,
dr.rate = (7/365)/1000)
sim <- icm(param, init, control)
summary(sim, at = 27)
summary(sim, at = 26)
cv_us_today <- NULL
tryCatch(cv_us_today <- read_csv(url(url)),
error = function(e) "error")
table(cv_us_today$Province_State)
cv_us_today %>%
filter(Province_State == 'New York')
ny_today <- cv_us_today %>%
filter(Province_State == 'New York')
ny_today
sum(ny_today$Recovered)
sum(ny_today$Deaths)
sum(ny_today$Active)
summary(sim, at = 26)
